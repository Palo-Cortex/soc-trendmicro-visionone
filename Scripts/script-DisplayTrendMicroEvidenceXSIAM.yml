commonfields:
  id: DisplayTrendMicroEvidenceXSIAM
  version: -1
name: DisplayTrendMicroEvidenceXSIAM
comment: Pretty-print raw Trend Micro payload for legacy layoutscontainer dynamic sections. Looks in _alert_data.raw_json, raw_json, and labels.
type: python
tags: [dynamic-section]
dockerimage: demisto/python3
enabled: true
fromversion: 6.2.0
marketplaces: [marketplacev2]
args:
  - name: json_field_candidates
    defaultValue: _alert_data.raw_json,raw_json,rawJSON,sourceRawEvent,xdrrawlog,_alert_data
    description: Comma-separated candidate fields to search for raw JSON (root and CustomFields are both checked).
script: |-
  import json
  from html import escape

  def path_get(obj, dotted):
    cur = obj
    for p in dotted.split('.'):
      if isinstance(cur, dict) and p in cur:
        cur = cur[p]
      else:
        return None
    return cur

  def buckets(inc):
    bs=[inc]
    for k in ('CustomFields','customFields'):
      v=inc.get(k)
      if isinstance(v,dict): bs.append(v)
    ad=inc.get('_alert_data') or (inc.get('CustomFields',{}) or {}).get('_alert_data')
    if isinstance(ad,dict): bs.append(ad)
    return bs

  def find_json_blob(inc, cands):
    for b in buckets(inc):
      for c in cands:
        val = path_get(b, c) if '.' in c else b.get(c)
        if not val: continue
        if isinstance(val, (dict, list)):
          return val
        if isinstance(val, str):
          s=val.strip()
          for attempt in (s, s.replace('\\\"','\"')):
            try:
              return json.loads(attempt)
            except Exception:
              pass
    return None

  def to_html(obj, depth=4, path=""):
    if depth < 0:
      return f"<i>(max depth reached @ {escape(path)})</i>"
    if isinstance(obj, dict):
      rows=[]
      for k,v in obj.items():
        rows.append(f"<tr><td><b>{escape(str(k))}</b></td><td>{to_html(v, depth-1, f'{path}.{k}' if path else k)}</td></tr>")
      return "<table border='1' cellpadding='4' cellspacing='0'>" + "".join(rows) + "</table>"
    if isinstance(obj, list):
      if not obj: return "[]"
      rows=[]
      for i,v in enumerate(obj[:500]):
        rows.append(f"<tr><td>{i}</td><td>{to_html(v, depth-1, f'{path}[{i}]')}</td></tr>")
      return "<table border='1' cellpadding='4' cellspacing='0'>" + "".join(rows) + "</table>"
    return escape(str(obj))

  def main():
    inc = demisto.incidents()[0]
    args = demisto.args()
    cands = [s.strip() for s in args.get('json_field_candidates','_alert_data.raw_json').split(',') if s.strip()]
    obj = find_json_blob(inc, cands)
    if obj is None:
      demisto.results({'Type': entryTypes['note'], 'ContentsFormat': formats['html'],
                       'Contents': "<i>No raw JSON found.</i><br/>Checked: " + escape(", ".join(cands))})
      return
    html = "<div style='font-family:monospace;font-size:12px'>" + to_html(obj, depth=4) + "</div>"
    demisto.results({'Type': entryTypes['note'],'ContentsFormat': formats['html'],'Contents': html})

  if __name__ in ('__main__','__builtin__','builtins'):
    main()
outputs: []
