commonfields:
  id: TrendMicroQuickActionsXSIAM
  version: -1
name: TrendMicroQuickActionsXSIAM
comment: Quick Actions for Vision One. Prefills args by mining incident fields and _alert_data.raw_json impact_scope.entities + indicators.
type: python
tags: [dynamic-section]
dockerimage: demisto/python3
enabled: true
fromversion: 6.2.0
marketplaces: [marketplacev2]
args: []
script: |-
  import json
  from html import escape

  def get_val(src, key):
    if key in src and src.get(key): return src.get(key)
    cf = src.get('CustomFields') or src.get('customFields') or {}
    return cf.get(key)

  def load_alert_json(inc):
    ad = inc.get('_alert_data') or (inc.get('CustomFields',{}) or {}).get('_alert_data')
    if isinstance(ad, dict):
      r = ad.get('raw_json')
      if isinstance(r,(dict,list)): return r
      if isinstance(r,str):
        for s in (r, r.replace('\\\"','\"')):
          try: return json.loads(s)
          except Exception: pass
    r2 = get_val(inc,'raw_json')
    if isinstance(r2,(dict,list)): return r2
    if isinstance(r2,str):
      for s in (r2, r2.replace('\\\"','\"')):
        try: return json.loads(s)
        except Exception: pass
    return None

  def pick_first(*vals):
    for v in vals:
      if v:
        if isinstance(v, list):
          for it in v:
            if it and str(it).strip(): return str(it)
        elif isinstance(v, (str,int,float)):
          if str(v).strip(): return str(v)
    return ""

  def find_indicators_array(aj):
    if isinstance(aj.get('indicators'), list):
      return aj.get('indicators')
    for k,v in aj.items():
      if isinstance(v, list) and v and all(isinstance(i, dict) for i in v):
        sm=v[0]
        if ('type' in sm and 'value' in sm) or ('[HOST:1303]' in sm and '[HOST:cd42]' in sm):
          return v
    return []

  def mine_context_from_json(aj):
    hostname=""; agentguid=""; username=""; sha256=""; sha1=""; domain=""; ip=""; url=""; obj=""; proc=""; cmdline=""; alert_id=""; msg_id=""
    # impact_scope.entities[].entity_value.{name, ips[], guid}
    try:
      scope = aj.get('impact_scope') or {}
      for ent in scope.get('entities',[]) or []:
        ev = ent.get('entity_value') or {}
        if not hostname and ev.get('name'): hostname = str(ev.get('name')).strip()
        if not agentguid and ev.get('guid'): agentguid = str(ev.get('guid')).strip()
        for _ip in ev.get('ips') or []:
          if not ip and _ip: ip = str(_ip).strip('[]').strip()
    except Exception: pass

    # indicators[]
    for it in find_indicators_array(aj):
      t = it.get('type') or it.get('[HOST:1303]')
      v = it.get('value') or it.get('[HOST:cd42]')
      if not t or v is None: continue
      if isinstance(v, dict):
        if not hostname and v.get('name'): hostname=str(v.get('name')).strip()
        if not agentguid and v.get('guid'): agentguid=str(v.get('guid')).strip()
        if not ip and v.get('ips'):
          ip = str(v.get('ips')[0]).strip('[]').strip()
      else:
        sval=str(v).strip()
        if not sha256 and t in ('file_sha256','sha256'): sha256=sval
        if not sha1 and t in ('file_sha1','sha1'): sha1=sval
        if not domain and t in ('domain','fqdn'): domain=sval
        if not ip and t in ('ip','dst_ip','src_ip'): ip=sval
        if not url and t in ('url','uri'): url=sval
        if not username and t in ('user','user_account','username'): username=sval
        if not proc and t in ('process','process_name','image'): proc=sval
        if not obj and t in ('path','file_path','file_name'): obj=sval

    # workbench / alert id (raw json often carries incident_id + workbench_link)
    alert_id = aj.get('incident_id') or aj.get('workbench_id') or ""
    # msg_id seldom present here; leave blank if not mapped by parser/playbook

    return hostname, agentguid, username, sha256, sha1, domain, ip, url, obj, proc, cmdline, alert_id, msg_id

  def mk(cmd, **kwargs):
    parts=[f"!{cmd}"]
    for k,v in kwargs.items():
      vv = (v or "").strip()
      parts.append(f'{k}="{vv if vv else "<REQUIRED>"}"')
    return " ".join(parts)

  def kv(label, value):
    v = escape(value) if value else "<i>missing</i>"
    return f"<tr><td><b>{escape(label)}</b></td><td>{v}</td></tr>"

  def section(title, lines):
    body = "\n".join(lines) if isinstance(lines,list) else lines
    return f"### {escape(title)}\n{body}\n"

  def codeblock(cmds):
    return "```\n" + ("\n".join(cmds)) + "\n```"

  def main():
    inc = demisto.incidents()[0]

    # Incident fields first
    hostname   = pick_first(get_val(inc,'entity_hostnames'), get_val(inc,'hostname'), get_val(inc,'host'))
    agentguid  = pick_first(get_val(inc,'trendmicrovisiononeagentguid'), get_val(inc,'agentguid'), get_val(inc,'endpoint_guid'))
    username   = pick_first(get_val(inc,'entity_users'), get_val(inc,'username'), get_val(inc,'user'))
    sha256     = pick_first(get_val(inc,'entity_hashes_sha256'), get_val(inc,'file_sha256'))
    sha1       = pick_first(get_val(inc,'entity_hashes'), get_val(inc,'file_sha1'))
    domain     = pick_first(get_val(inc,'entity_domains'), get_val(inc,'domain'))
    ip         = pick_first(get_val(inc,'entity_host_ips'), get_val(inc,'ip'))
    url        = pick_first(get_val(inc,'entity_urls'), get_val(inc,'url'))
    msg_id     = pick_first(get_val(inc,'email_message_id'), get_val(inc,'messageid'))
    alert_id   = pick_first(get_val(inc,'trendmicrovisiononexdrworkbenchid'), get_val(inc,'workbenchid'), get_val(inc,'incident_id'))
    obj        = pick_first(get_val(inc,'entity_files'), get_val(inc,'file_path'), get_val(inc,'filename'))
    proc       = pick_first(get_val(inc,'entity_processes'), get_val(inc,'process'))
    cmdline    = pick_first(get_val(inc,'entity_commandlines'), get_val(inc,'commandline'), get_val(inc,'cmdline'))

    # If still missing, mine raw json using your schemas
    if not any([hostname, agentguid, username, sha256, sha1, domain, ip, url, alert_id]):
      aj = load_alert_json(inc)
      if aj:
        h,a,u,s256,s1,d,i,uurl,o,p,cl,aid,mid = mine_context_from_json(aj)
        hostname = hostname or h
        agentguid= agentguid or a
        username = username or u
        sha256   = sha256 or s256
        sha1     = sha1 or s1
        domain   = domain or d
        ip       = ip or i
        url      = url or uurl
        obj      = obj or o
        proc     = proc or p
        cmdline  = cmdline or cl
        alert_id = alert_id or aid
        msg_id   = msg_id or mid

    file_hash  = sha256 or sha1

    # Context header
    rows = [
      kv("Hostname", hostname), kv("Agent GUID", agentguid), kv("User", username),
      kv("File Hash", file_hash), kv("Domain", domain), kv("IP", ip), kv("URL", url),
      kv("Email Message ID", msg_id), kv("Workbench/Alert ID", alert_id),
      kv("Process", proc), kv("CommandLine", cmdline), kv("Filename/Path", obj),
    ]
    context_html = "<table border='1' cellpadding='4' cellspacing='0'>" + "".join(rows) + "</table>"

    # Commands
    containment = [
      mk("trendmicro-visionone-isolate-endpoint", hostName=hostname, agentGuid=agentguid),
      mk("trendmicro-visionone-restore-endpoint-connection", hostName=hostname, agentGuid=agentguid),
      mk("trendmicro-visionone-terminate-process", hostName=hostname, agentGuid=agentguid, processName=proc, commandLine=cmdline),
    ]
    account = [
      mk("trendmicro-visionone-disable-user-account", userName=username),
      mk("trendmicro-visionone-enable-user-account",  userName=username),
      mk("trendmicro-visionone-force-signout",        userName=username),
      mk("trendmicro-visionone-force-password-reset", userName=username),
    ]
    email = [
      mk("trendmicro-visionone-quarantine-email-message", messageId=msg_id),
      mk("trendmicro-visionone-restore-email-message",    messageId=msg_id),
      mk("trendmicro-visionone-delete-email-message",     messageId=msg_id),
    ]
    lists_block = [
      mk("trendmicro-visionone-add-to-block-list", domain=domain, ip=ip, file_sha1=sha1, url=url, sender_mail_address=username),
      mk("trendmicro-visionone-remove-from-block-list", domain=domain, ip=ip, file_sha1=sha1, url=url, sender_mail_address=username),
    ]
    lists_suspicious = [
      mk("trendmicro-visionone-add-objects-to-suspicious-list", domain=domain, ip=ip, url=url, file_sha1=sha1, file_sha256=sha256, sender_mail_address=username),
      mk("trendmicro-visionone-delete-objects-from-suspicious-list", domain=domain, ip=ip, url=url, file_sha1=sha1, file_sha256=sha256, sender_mail_address=username),
    ]
    lists_exception = [
      mk("trendmicro-visionone-add-objects-to-exception-list", domain=domain, ip=ip, url=url, file_sha1=sha1, file_sha256=sha256, sender_mail_address=username),
      mk("trendmicro-visionone-delete-objects-from-exception-list", domain=domain, ip=ip, url=url, file_sha1=sha1, file_sha256=sha256, sender_mail_address=username),
    ]
    sandbox = [
      mk("trendmicro-visionone-submit-file-to-sandbox", fileHash=(file_hash or "<REQUIRED>"), fileName=(obj or "<REQUIRED>")),
      mk("trendmicro-visionone-submit-urls-to-sandbox", urls=(url or "<REQUIRED>")),
      mk("trendmicro-visionone-get-file-analysis-status", submissionId="<SUBMISSION_ID>"),
      mk("trendmicro-visionone-get-file-analysis-result", submissionId="<SUBMISSION_ID>"),
      mk("trendmicro-visionone-download-analysis-report", submissionId="<SUBMISSION_ID>"),
    ]
    forensics = [
      mk("trendmicro-visionone-collect-forensic-file", hostName=hostname, agentGuid=agentguid, path=(obj or "<REQUIRED>")),
      mk("trendmicro-visionone-download-information-for-collected-forensic-file", taskId="<TASK_ID>"),
      mk("trendmicro-visionone-check-task-status", taskId="<TASK_ID>"),
    ]
    alert_ops = [
      mk("trendmicro-visionone-get-alert-details", alertId=(alert_id or "<REQUIRED>")),
      mk("trendmicro-visionone-update-status",     alertId=(alert_id or "<REQUIRED>"), status="<NewStatus>"),
      mk("trendmicro-visionone-add-note",          workbenchId=(alert_id or "<REQUIRED>"), note="Analyst note here"),
    ]
    custom_scripts = [
      mk("trendmicro-visionone-get-custom-script-list"),
      mk("trendmicro-visionone-add-custom-script",    scriptName="<NAME>", description="<DESC>", content="<BASE64>"),
      mk("trendmicro-visionone-update-custom-script", scriptId="<SCRIPT_ID>", content="<BASE64>"),
      mk("trendmicro-visionone-download-custom-script", scriptId="<SCRIPT_ID>"),
      mk("trendmicro-visionone-delete-custom-script", scriptId="<SCRIPT_ID>"),
      mk("trendmicro-visionone-run-custom-script",   scriptId="<SCRIPT_ID>", hostName=hostname, agentGuid=agentguid),
    ]

    sections = []
    sections.append("<h3>Resolved Context</h3>" + context_html)
    def block(t, cmds): return f"### {escape(t)}\n```\n" + "\n".join(cmds) + "\n```\n"
    sections += [
      block("Containment", containment),
      block("Account Controls", account),
      block("Email Controls", email),
      block("Block / Allow Lists", lists_block + [""] + lists_suspicious + [""] + lists_exception),
      block("Sandbox & Forensics", sandbox + [""] + forensics),
      block("Alert / Workbench", alert_ops),
      block("Custom Scripts (Admin)", custom_scripts),
    ]

    html = "<div style='font-family:monospace;font-size:12px'>" + "\n".join(sections) + "</div>"
    demisto.results({'Type': entryTypes['note'], 'ContentsFormat': formats['html'], 'Contents': html})

  if __name__ in ('__main__','__builtin__','builtins'):
    main()
outputs: []
