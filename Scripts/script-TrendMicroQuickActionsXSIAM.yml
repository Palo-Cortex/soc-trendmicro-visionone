commonfields:
  id: TrendMicroQuickActionsXSIAM
  version: -1
name: TrendMicroQuickActionsXSIAM
comment: Quick Actions for Vision One. Prefills args by mining incident fields and _alert_data.raw_json.
type: python
tags: [dynamic-section]
dockerimage: demisto/python3
enabled: true
fromversion: 6.2.0
marketplaces: [marketplacev2]
args: []
script: |-
  import json
  from html import escape

  def get_val(src, key):
    if key in src and src.get(key): return src.get(key)
    cf = src.get('CustomFields') or src.get('customFields') or {}
    return cf.get(key)

  def load_alert_json(inc):
    ad = inc.get('_alert_data') or (inc.get('CustomFields',{}) or {}).get('_alert_data')
    if isinstance(ad, dict):
      r = ad.get('raw_json')
      if isinstance(r,(dict,list)): return r
      if isinstance(r,str):
        for s in (r, r.replace('\\\"','\"')):
          try: return json.loads(s)
          except Exception: pass
    r2 = get_val(inc,'raw_json')
    if isinstance(r2,(dict,list)): return r2
    if isinstance(r2,str):
      for s in (r2, r2.replace('\\\"','\"')):
        try: return json.loads(s)
        except Exception: pass
    return None

  def walk_collect(obj, want):
    out = {k: set() for k in want}
    def _w(o):
      if isinstance(o, dict):
        for k,v in o.items():
          lk=k.lower()
          for w in want:
            if w in lk:
              if isinstance(v,(str,int,float)): out[w].add(str(v))
              elif isinstance(v,list):
                for it in v:
                  if isinstance(it,(str,int,float)): out[w].add(str(it))
          _w(v)
      elif isinstance(o,list):
        for it in o: _w(it)
    _w(obj)
    return {k: [s for s in sorted(v) if s] for k,v in out.items()}

  def pick_first(*vals):
    for v in vals:
      if v:
        if isinstance(v, list): 
          for it in v:
            if it and str(it).strip(): return str(it)
        elif isinstance(v, (str,int,float)):
          if str(v).strip(): return str(v)
    return ""

  def mk(cmd, **kwargs):
    parts=[f"!{cmd}"]
    for k,v in kwargs.items():
      vv = (v or "").strip()
      parts.append(f'{k}="{vv if vv else "<REQUIRED>"}"')
    return " ".join(parts)

  def kv(label, value):
    v = escape(value) if value else "<i>missing</i>"
    return f"<tr><td><b>{escape(label)}</b></td><td>{v}</td></tr>"

  def section(title, lines):
    body = "\n".join(lines) if isinstance(lines,list) else lines
    return f"### {escape(title)}\n{body}\n"

  def codeblock(cmds):
    return "```\n" + ("\n".join(cmds)) + "\n```"

  def main():
    inc = demisto.incidents()[0]

    hostname   = pick_first(get_val(inc,'entity_hostnames'), get_val(inc,'hostname'), get_val(inc,'host'))
    agentguid  = pick_first(get_val(inc,'trendmicrovisiononeagentguid'), get_val(inc,'agentguid'), get_val(inc,'endpoint_guid'))
    username   = pick_first(get_val(inc,'entity_users'), get_val(inc,'username'), get_val(inc,'user'))
    sha256     = pick_first(get_val(inc,'entity_hashes_sha256'), get_val(inc,'file_sha256'))
    sha1       = pick_first(get_val(inc,'entity_hashes'), get_val(inc,'file_sha1'))
    domain     = pick_first(get_val(inc,'entity_domains'), get_val(inc,'domain'))
    ip         = pick_first(get_val(inc,'entity_host_ips'), get_val(inc,'ip'))
    url        = pick_first(get_val(inc,'entity_urls'), get_val(inc,'url'))
    msg_id     = pick_first(get_val(inc,'email_message_id'), get_val(inc,'messageid'))
    alert_id   = pick_first(get_val(inc,'trendmicrovisiononexdrworkbenchid'), get_val(inc,'workbenchid'), get_val(inc,'incident_id'))
    obj        = pick_first(get_val(inc,'entity_files'), get_val(inc,'file_path'), get_val(inc,'filename'))
    proc       = pick_first(get_val(inc,'entity_processes'), get_val(inc,'process'))
    cmdline    = pick_first(get_val(inc,'entity_commandlines'), get_val(inc,'commandline'), get_val(inc,'cmdline'))
    file_hash  = sha256 or sha1

    if not any([hostname, agentguid, username, file_hash, domain, ip, url, msg_id, alert_id]):
      aj=load_alert_json(inc)
      if aj:
        found = walk_collect(aj, ['hostname','host','agent','agentguid','username','user','sha256','sha1','hash','domain','ip','url','messageid','workbench','alertid','incident_id','file','process','cmdline','commandline'])
        hostname  = hostname  or pick_first(found.get('hostname'), found.get('host'))
        agentguid = agentguid or pick_first(found.get('agentguid'), found.get('agent'))
        username  = username  or pick_first(found.get('username'), found.get('user'))
        sha256    = sha256    or pick_first(found.get('sha256'))
        sha1      = sha1      or pick_first(found.get('sha1'), found.get('hash'))
        domain    = domain    or pick_first(found.get('domain'))
        ip        = ip        or pick_first(found.get('ip'))
        url       = url       or pick_first(found.get('url'))
        msg_id    = msg_id    or pick_first(found.get('messageid'))
        alert_id  = alert_id  or pick_first(found.get('workbench'), found.get('alertid'), found.get('incident_id'))
        obj       = obj       or pick_first(found.get('file'))
        proc      = proc      or pick_first(found.get('process'))
        cmdline   = cmdline   or pick_first(found.get('commandline'), found.get('cmdline'))
        file_hash = sha256 or sha1 or file_hash

    rows = [
      kv("Hostname", hostname), kv("Agent GUID", agentguid), kv("User", username),
      kv("File Hash", file_hash), kv("Domain", domain), kv("IP", ip), kv("URL", url),
      kv("Email Message ID", msg_id), kv("Workbench/Alert ID", alert_id),
      kv("Process", proc), kv("CommandLine", cmdline), kv("Filename/Path", obj),
    ]
    context_html = "<table border='1' cellpadding='4' cellspacing='0'>" + "".join(rows) + "</table>"

    containment = [
      mk("trendmicro-visionone-isolate-endpoint", hostName=hostname, agentGuid=agentguid),
      mk("trendmicro-visionone-restore-endpoint-connection", hostName=hostname, agentGuid=agentguid),
      mk("trendmicro-visionone-terminate-process", hostName=hostname, agentGuid=agentguid, processName=proc, commandLine=cmdline),
    ]
    account = [
      mk("trendmicro-visionone-disable-user-account", userName=username),
      mk("trendmicro-visionone-enable-user-account",  userName=username),
      mk("trendmicro-visionone-force-signout",        userName=username),
      mk("trendmicro-visionone-force-password-reset", userName=username),
    ]
    email = [
      mk("trendmicro-visionone-quarantine-email-message", messageId=msg_id),
      mk("trendmicro-visionone-restore-email-message",    messageId=msg_id),
      mk("trendmicro-visionone-delete-email-message",     messageId=msg_id),
    ]
    lists_block = [
      mk("trendmicro-visionone-add-to-block-list", domain=domain, ip=ip, file_sha1=sha1, url=url, sender_mail_address=username),
      mk("trendmicro-visionone-remove-from-block-list", domain=domain, ip=ip, file_sha1=sha1, url=url, sender_mail_address=username),
    ]
    lists_suspicious = [
      mk("trendmicro-visionone-add-objects-to-suspicious-list", domain=domain, ip=ip, url=url, file_sha1=sha1, file_sha256=sha256, sender_mail_address=username),
      mk("trendmicro-visionone-delete-objects-from-suspicious-list", domain=domain, ip=ip, url=url, file_sha1=sha1, file_sha256=sha256, sender_mail_address=username),
    ]
    lists_exception = [
      mk("trendmicro-visionone-add-objects-to-exception-list", domain=domain, ip=ip, url=url, file_sha1=sha1, file_sha256=sha256, sender_mail_address=username),
      mk("trendmicro-visionone-delete-objects-from-exception-list", domain=domain, ip=ip, url=url, file_sha1=sha1, file_sha256=sha256, sender_mail_address=username),
    ]
    sandbox = [
      mk("trendmicro-visionone-submit-file-to-sandbox", fileHash=(file_hash or "<REQUIRED>"), fileName=(obj or "<REQUIRED>")),
      mk("trendmicro-visionone-submit-urls-to-sandbox", urls=(url or "<REQUIRED>")),
      mk("trendmicro-visionone-get-file-analysis-status", submissionId="<SUBMISSION_ID>"),
      mk("trendmicro-visionone-get-file-analysis-result", submissionId="<SUBMISSION_ID>"),
      mk("trendmicro-visionone-download-analysis-report", submissionId="<SUBMISSION_ID>"),
    ]
    forensics = [
      mk("trendmicro-visionone-collect-forensic-file", hostName=hostname, agentGuid=agentguid, path=(obj or "<REQUIRED>")),
      mk("trendmicro-visionone-download-information-for-collected-forensic-file", taskId="<TASK_ID>"),
      mk("trendmicro-visionone-check-task-status", taskId="<TASK_ID>"),
    ]
    alert_ops = [
      mk("trendmicro-visionone-get-alert-details", alertId=(alert_id or "<REQUIRED>")),
      mk("trendmicro-visionone-update-status",     alertId=(alert_id or "<REQUIRED>"), status="<NewStatus>"),
      mk("trendmicro-visionone-add-note",          workbenchId=(alert_id or "<REQUIRED>"), note="Analyst note here"),
    ]
    custom_scripts = [
      mk("trendmicro-visionone-get-custom-script-list"),
      mk("trendmicro-visionone-add-custom-script",    scriptName="<NAME>", description="<DESC>", content="<BASE64>"),
      mk("trendmicro-visionone-update-custom-script", scriptId="<SCRIPT_ID>", content="<BASE64>"),
      mk("trendmicro-visionone-download-custom-script", scriptId="<SCRIPT_ID>"),
      mk("trendmicro-visionone-delete-custom-script", scriptId="<SCRIPT_ID>"),
      mk("trendmicro-visionone-run-custom-script",   scriptId="<SCRIPT_ID>", hostName=hostname, agentGuid=agentguid),
    ]

    sections = []
    sections.append("<h3>Resolved Context</h3>" + context_html)
    def block(t, cmds): return f"### {escape(t)}\n```\n" + "\n".join(cmds) + "\n```\n"
    sections += [
      block("Containment", containment),
      block("Account Controls", account),
      block("Email Controls", email),
      block("Block / Allow Lists", lists_block + [""] + lists_suspicious + [""] + lists_exception),
      block("Sandbox & Forensics", sandbox + [""] + forensics),
      block("Alert / Workbench", alert_ops),
      block("Custom Scripts (Admin)", custom_scripts),
    ]

    html = "<div style='font-family:monospace;font-size:12px'>" + "\n".join(sections) + "</div>"
    demisto.results({'Type': entryTypes['note'], 'ContentsFormat': formats['html'], 'Contents': html})

  if __name__ in ('__main__','__builtin__','builtins'):
    main()
outputs: []
