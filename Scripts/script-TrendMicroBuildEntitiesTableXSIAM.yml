commonfields:
  id: TrendMicroBuildEntitiesTableXSIAM
  version: -1
name: TrendMicroBuildEntitiesTableXSIAM
comment: Entities/IOC table for legacy layoutscontainer dynamic sections (works with root or CustomFields).
type: python
tags: [dynamic-section]
enabled: true
fromversion: 6.2.0
marketplaces: [marketplacev2]
args:
  - name: hostnames_field
    defaultValue: entity_hostnames
  - name: hostips_field
    defaultValue: entity_host_ips
  - name: users_field
    defaultValue: entity_users
  - name: files_field
    defaultValue: entity_files
  - name: hashes_field
    defaultValue: entity_hashes
  - name: processes_field
    defaultValue: entity_processes
script: |-
  import json

  def get_val(src, key):
    # allow root or CustomFields
    if key in src: return src.get(key)
    cf = src.get('CustomFields') or src.get('customFields') or {}
    return cf.get(key)

  def norm(x):
    if x is None:
      return []
    if isinstance(x, list):
      out=[]
      for v in x:
        s = v if isinstance(v,str) else str(v)
        s = s.strip()
        if s.startswith('"') and s.endswith('"') and len(s)>=2:
          s = s[1:-1]
        if s:
          out.append(s)
      return out
    if isinstance(x, str):
      s=x.strip()
      if not s:
        return []
      # try JSON array
      try:
        obj=json.loads(s)
        if isinstance(obj, list):
          return [str(i).strip('"') for i in obj if str(i).strip('"')]
      except Exception:
        pass
      # fallback to common delimiters
      for d in ['|', ',', ';', '\n', '\t', ' ']:
        if d in s:
          return [i.strip().strip('"') for i in s.split(d) if i.strip().strip('"')]
      return [s.strip('"')]
    return [str(x)]

  def table_md(rows, headers):
    out=["| "+ " | ".join(headers) +" |","| "+ " | ".join(["---"]*len(headers)) +" |"]
    for r in rows:
      out.append("| "+ " | ".join(r) +" |")
    return "\n".join(out)

  def main():
    inc = demisto.incidents()[0]
    args = demisto.args()

    hosts = norm(get_val(inc, args.get('hostnames_field','entity_hostnames')))
    ips   = norm(get_val(inc, args.get('hostips_field','entity_host_ips')))
    users = norm(get_val(inc, args.get('users_field','entity_users')))
    files = norm(get_val(inc, args.get('files_field','entity_files')))
    hashes= norm(get_val(inc, args.get('hashes_field','entity_hashes')))
    procs = norm(get_val(inc, args.get('processes_field','entity_processes')))

    maxlen = max(len(hosts),len(ips),len(users),len(files),len(hashes),len(procs),1)
    def pad(lst): return lst + [""]*(maxlen-len(lst))

    rows=[]
    for i in range(maxlen):
      rows.append([pad(hosts)[i], pad(ips)[i], pad(users)[i], pad(files)[i], pad(hashes)[i], pad(procs)[i]])

    md = table_md(rows, ["Hostname","IP","User","File","Hash","Process"])
    demisto.results({'Type': entryTypes['note'], 'ContentsFormat': formats['markdown'], 'Contents': md})

  if __name__ in ('__main__','__builtin__','builtins'):
    main()
outputs: []
